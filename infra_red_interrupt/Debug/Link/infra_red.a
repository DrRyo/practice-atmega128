;/*
; * infra_red.c
; *
; * Created: 2019-01-15 ¿ÀÈÄ 5:39:25
; * Author: ryo
; */
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;#include <stdio.h>
;#include <delay.h>
;
;#define _ALTERNATE_PUTCHAR_
;void putchar(char c){while (!(UCSR0A & (1<<UDRE0)));UDR0=c;}
; 0000 000E void putchar(char c){while (!(UCSR0A & (1<<5       )));UDR0=c;}

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	c -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;// UART0 initialize
;// desired baud rate: 9600
;// actual baud rate: 9600 (0.0%)
;// char size: 8 bit
;// parity: Disabled
;void uart0_init(void)
; 0000 0016 {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0017     UCSR0B = 0x00; //disable while setting baud rate
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0018     UCSR0A = 0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0019     UCSR0C = 0x06; //0x0E;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001A     UBRR0H = 0x00; //set baud rate hi
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001B     UBRR0L = 0x67; //set baud rate lo
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001C     UCSR0B = 0x18;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001D }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;void adc_interrupt_init(void)
; 0000 0020 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0021     // https://webnautes.tistory.com/991
; 0000 0022     // http://maxpulse.tistory.com/153
; 0000 0023     // http://www.newtc.co.kr/dpshop/bbs/board.php?bo_table=m41&wr_id=772&sca=&sfl=wr_subject%7C%7Cwr_content&stx=adc&so ...
; 0000 0024 
; 0000 0025     DDRF = 0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0026     ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0027     ADMUX |= (1 << REFS0);  // Set ADC reference to AVCC
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0028     ADCSRA |= (1 << ADEN);  // Enable ADC
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0029     ADCSRA |= (1 << ADSC);  // Start A2D Conversions
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002A }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;uint16_t read_adc(void)
; 0000 002D {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002E     ADMUX &= 0xE0;          // Single Ended Input with ADC0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002F     ADMUX |= 0x00;          // ?
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0030 
; 0000 0031 
; 0000 0032     ADCSRA |= (1 << ADSC);  // Start A2D Conversions
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0033     while ((ADCSRA & (1 << ADSC)));
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0034     ADCSRA |= (1 << ADIF);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0035 
; 0000 0036     return ADCW;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0037 }
;PCODE: $0000004F VOL: 0
;
;void main(void)
; 0000 003A {
;PCODE: $00000050 VOL: 0
; 0000 003B     uint16_t ir_value;
; 0000 003C     //char val[10];
; 0000 003D 
; 0000 003E     PORTG = 0x01;
;	ir_value -> R16,R17
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003F     DDRG = 0x03;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0040 
; 0000 0041     uart0_init();
;PCODE: $00000055 VOL: 0
; 0000 0042     adc_interrupt_init();
;PCODE: $00000056 VOL: 0
; 0000 0043 
; 0000 0044     while (1)
;PCODE: $00000057 VOL: 0
; 0000 0045     {
; 0000 0046         PORTG ^= 0x03;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0047         ir_value = read_adc();
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0048 
; 0000 0049         //printf("ABC");
; 0000 004A         //sprintf(val, "%u", ir_value);
; 0000 004B         printf("Sensor Value : %u\r\n", ir_value);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 004C         delay_ms(80000 / ir_value + 100);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 004D     }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004E }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
