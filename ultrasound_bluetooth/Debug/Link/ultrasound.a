;/*
; * ultrasound.c
; *
; * Created: 2019-01-22 ¿ÀÀü 11:17:55
; * Author: ryo
; */
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;#include <stdio.h>
;#include <delay.h>
;
;#define _ALTERNATE_PUTCHAR_
;void putchar(char c){while (!(UCSR0A & (1<<UDRE0)));UDR0=c;}
; 0000 000E void putchar(char c){while (!(UCSR0A & (1<<5       )));UDR0=c;}

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	c -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;volatile unsigned int pulse_count = 0;
;volatile unsigned int toggle = 0;
;
;// UART0 initialize
;// desired baud rate: 9600
;// actual baud rate: 9600 (0.0%)
;// char size: 8 bit
;// parity: Disabled
;void uart0_init(void)
; 0000 0019 {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001A     UCSR0B = 0x00; //disable while setting baud rate
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001B     UCSR0A = 0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001C     UCSR0C = 0x06;      // 0x0E;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001D     UBRR0H = 0x00;      // set baud rate hi
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001E     UBRR0L = 0x67;      // set baud rate lo
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001F     UCSR0B = 0x18;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0020 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;void sonar_init(void)
; 0000 0023 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0024     EIMSK = 0x01;       // INT0 External Interrupt Enable
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0025     EICRA = 0x03;       // INT0 Rising Edge Interrupt Request
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0026     SREG = 0x80;        // Global Interrupt Enable
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0027 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;interrupt [TIM0_OVF] void count_pulse(void)
; 0000 002A {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002B     pulse_count++;      // Increase at every 58us
;PCODE: $00000038 VOL: 1
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002C }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;interrupt [EXT_INT0] void read_pulse(void)
; 0000 002F {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0030     if(toggle == 0){
;PCODE: $00000041 VOL: 1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0031         //At Rising Edge
; 0000 0032         pulse_count = 0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 1
; 0000 0033         TIMSK = 0x01;   // Time Counter 0 Enable (8-bit Timer/Counter)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0034                         // 1 / 16 * 10^6 = 0.0000000625s
; 0000 0035         TCCR0 = 0x02;   // 0.0000000625s * 8 = 0.5us
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0036         TCNT0 = 140;    // 0.000058 / 0.0000005 = 116
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0037                         // 8bit: 255, (255 - 116 + 1) = 140
; 0000 0038         EICRA = 0x02;   // INT0 Falling Edge Interrupt Request
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0039         toggle = 1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 1
; 0000 003A     }else{
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003B         //At Falling Edge
; 0000 003C         printf("Object is %d cm far from sensor.\r\n", pulse_count);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 1
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003D 
; 0000 003E         EICRA = 0x03;   // INT0 Rising Edge Interrupt Request
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003F         toggle = 0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 1
; 0000 0040     }
;PCODE: $00000060 VOL: 0
; 0000 0041 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;
;void main(void)
; 0000 0045 {
;PCODE: $00000064 VOL: 0
; 0000 0046     DDRG = 0x03;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0047     PORTG = 0x01;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0048 
; 0000 0049     DDRD = 0x02;        // Use PortD1 as output
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004A     PORTD = 0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004B 
; 0000 004C     uart0_init();
;PCODE: $0000006D VOL: 0
; 0000 004D     sonar_init();
;PCODE: $0000006E VOL: 0
; 0000 004E 
; 0000 004F     while (1)
;PCODE: $0000006F VOL: 0
; 0000 0050     {
; 0000 0051         PORTG ^= 0x03;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0052 
; 0000 0053         PORTD = 0x02;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0054         delay_us(10);
;PCODE: $00000076 VOL: 0
; 0000 0055         PORTD = 0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0056 
; 0000 0057         delay_ms(200);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0058     }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0059 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
